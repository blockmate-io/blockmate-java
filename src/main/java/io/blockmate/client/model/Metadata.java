/*
 * Blockmate
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.blockmate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.blockmate.client.model.MetadataAttributesInner;
import io.blockmate.client.model.NftMedia;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * String - Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.
 */
@ApiModel(description = "String - Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class Metadata {
  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_EXTERNAL_URL = "external_url";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_URL)
  private String externalUrl;

  public static final String SERIALIZED_NAME_BACKGROUND_COLOR = "background_color";
  @SerializedName(SERIALIZED_NAME_BACKGROUND_COLOR)
  private String backgroundColor;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private List<MetadataAttributesInner> attributes = null;

  public static final String SERIALIZED_NAME_MEDIA = "media";
  @SerializedName(SERIALIZED_NAME_MEDIA)
  private NftMedia media;

  public Metadata() {
  }

  public Metadata image(String image) {
    
    this.image = image;
    return this;
  }

   /**
   * String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.
   * @return image
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.")

  public String getImage() {
    return image;
  }


  public void setImage(String image) {
    this.image = image;
  }


  public Metadata externalUrl(String externalUrl) {
    
    this.externalUrl = externalUrl;
    return this;
  }

   /**
   * String - The image URL that appears alongside the asset image on NFT platforms.
   * @return externalUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - The image URL that appears alongside the asset image on NFT platforms.")

  public String getExternalUrl() {
    return externalUrl;
  }


  public void setExternalUrl(String externalUrl) {
    this.externalUrl = externalUrl;
  }


  public Metadata backgroundColor(String backgroundColor) {
    
    this.backgroundColor = backgroundColor;
    return this;
  }

   /**
   * String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.
   * @return backgroundColor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.")

  public String getBackgroundColor() {
    return backgroundColor;
  }


  public void setBackgroundColor(String backgroundColor) {
    this.backgroundColor = backgroundColor;
  }


  public Metadata name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * String - Name of the NFT asset.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - Name of the NFT asset.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public Metadata description(String description) {
    
    this.description = description;
    return this;
  }

   /**
   * String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    this.description = description;
  }


  public Metadata attributes(List<MetadataAttributesInner> attributes) {
    
    this.attributes = attributes;
    return this;
  }

  public Metadata addAttributesItem(MetadataAttributesInner attributesItem) {
    if (this.attributes == null) {
      this.attributes = new ArrayList<>();
    }
    this.attributes.add(attributesItem);
    return this;
  }

   /**
   * Object - Traits/attributes/characteristics for each NFT asset.
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Object - Traits/attributes/characteristics for each NFT asset.")

  public List<MetadataAttributesInner> getAttributes() {
    return attributes;
  }


  public void setAttributes(List<MetadataAttributesInner> attributes) {
    this.attributes = attributes;
  }


  public Metadata media(NftMedia media) {
    
    this.media = media;
    return this;
  }

   /**
   * Get media
   * @return media
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NftMedia getMedia() {
    return media;
  }


  public void setMedia(NftMedia media) {
    this.media = media;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Metadata metadata = (Metadata) o;
    return Objects.equals(this.image, metadata.image) &&
        Objects.equals(this.externalUrl, metadata.externalUrl) &&
        Objects.equals(this.backgroundColor, metadata.backgroundColor) &&
        Objects.equals(this.name, metadata.name) &&
        Objects.equals(this.description, metadata.description) &&
        Objects.equals(this.attributes, metadata.attributes) &&
        Objects.equals(this.media, metadata.media);
  }

  @Override
  public int hashCode() {
    return Objects.hash(image, externalUrl, backgroundColor, name, description, attributes, media);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Metadata {\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    externalUrl: ").append(toIndentedString(externalUrl)).append("\n");
    sb.append("    backgroundColor: ").append(toIndentedString(backgroundColor)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    media: ").append(toIndentedString(media)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

