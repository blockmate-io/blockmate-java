/*
 * Blockmate
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.blockmate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NftContractMetadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NftContractMetadata {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SYMBOL = "symbol";
  @SerializedName(SERIALIZED_NAME_SYMBOL)
  private String symbol;

  public static final String SERIALIZED_NAME_TOTAL_SUPPLY = "totalSupply";
  @SerializedName(SERIALIZED_NAME_TOTAL_SUPPLY)
  private String totalSupply;

  public static final String SERIALIZED_NAME_TOKEN_TYPE = "tokenType";
  @SerializedName(SERIALIZED_NAME_TOKEN_TYPE)
  private String tokenType;

  public NftContractMetadata() {
  }

  public NftContractMetadata name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * String - NFT contract name.
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - NFT contract name.")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public NftContractMetadata symbol(String symbol) {
    
    this.symbol = symbol;
    return this;
  }

   /**
   * String - NFT contract symbol abbreviation.
   * @return symbol
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - NFT contract symbol abbreviation.")

  public String getSymbol() {
    return symbol;
  }


  public void setSymbol(String symbol) {
    this.symbol = symbol;
  }


  public NftContractMetadata totalSupply(String totalSupply) {
    
    this.totalSupply = totalSupply;
    return this;
  }

   /**
   * String - Total number of NFTs in a given NFT collection.
   * @return totalSupply
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - Total number of NFTs in a given NFT collection.")

  public String getTotalSupply() {
    return totalSupply;
  }


  public void setTotalSupply(String totalSupply) {
    this.totalSupply = totalSupply;
  }


  public NftContractMetadata tokenType(String tokenType) {
    
    this.tokenType = tokenType;
    return this;
  }

   /**
   * String - &#39;ERC721&#39; or &#39;ERC1155&#39;
   * @return tokenType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - 'ERC721' or 'ERC1155'")

  public String getTokenType() {
    return tokenType;
  }


  public void setTokenType(String tokenType) {
    this.tokenType = tokenType;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NftContractMetadata nftContractMetadata = (NftContractMetadata) o;
    return Objects.equals(this.name, nftContractMetadata.name) &&
        Objects.equals(this.symbol, nftContractMetadata.symbol) &&
        Objects.equals(this.totalSupply, nftContractMetadata.totalSupply) &&
        Objects.equals(this.tokenType, nftContractMetadata.tokenType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, symbol, totalSupply, tokenType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NftContractMetadata {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    symbol: ").append(toIndentedString(symbol)).append("\n");
    sb.append("    totalSupply: ").append(toIndentedString(totalSupply)).append("\n");
    sb.append("    tokenType: ").append(toIndentedString(tokenType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

