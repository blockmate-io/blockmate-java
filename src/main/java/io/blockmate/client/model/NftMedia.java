/*
 * Blockmate
 * Blockmate API OpenAPI documentation
 *
 * The version of the OpenAPI document: 0.0.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.blockmate.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * NftMedia
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class NftMedia {
  public static final String SERIALIZED_NAME_RAW = "raw";
  @SerializedName(SERIALIZED_NAME_RAW)
  private String raw;

  public static final String SERIALIZED_NAME_GATEWAY = "gateway";
  @SerializedName(SERIALIZED_NAME_GATEWAY)
  private String gateway;

  public static final String SERIALIZED_NAME_THUMBNAIL = "thumbnail";
  @SerializedName(SERIALIZED_NAME_THUMBNAIL)
  private String thumbnail;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_BYTES = "bytes";
  @SerializedName(SERIALIZED_NAME_BYTES)
  private Integer bytes;

  public NftMedia() {
  }

  public NftMedia raw(String raw) {
    
    this.raw = raw;
    return this;
  }

   /**
   * String - Uri representing the location of the NFT&#39;s original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.
   * @return raw
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated.")

  public String getRaw() {
    return raw;
  }


  public void setRaw(String raw) {
    this.raw = raw;
  }


  public NftMedia gateway(String gateway) {
    
    this.gateway = gateway;
    return this;
  }

   /**
   * String - Public gateway uri for the raw uri above.
   * @return gateway
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "String - Public gateway uri for the raw uri above.")

  public String getGateway() {
    return gateway;
  }


  public void setGateway(String gateway) {
    this.gateway = gateway;
  }


  public NftMedia thumbnail(String thumbnail) {
    
    this.thumbnail = thumbnail;
    return this;
  }

   /**
   * URL for a resized thumbnail of the NFT media asset.
   * @return thumbnail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL for a resized thumbnail of the NFT media asset.")

  public String getThumbnail() {
    return thumbnail;
  }


  public void setThumbnail(String thumbnail) {
    this.thumbnail = thumbnail;
  }


  public NftMedia format(String format) {
    
    this.format = format;
    return this;
  }

   /**
   * The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.
   * @return format
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.")

  public String getFormat() {
    return format;
  }


  public void setFormat(String format) {
    this.format = format;
  }


  public NftMedia bytes(Integer bytes) {
    
    this.bytes = bytes;
    return this;
  }

   /**
   * The size of the media asset in bytes.
   * @return bytes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The size of the media asset in bytes.")

  public Integer getBytes() {
    return bytes;
  }


  public void setBytes(Integer bytes) {
    this.bytes = bytes;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NftMedia nftMedia = (NftMedia) o;
    return Objects.equals(this.raw, nftMedia.raw) &&
        Objects.equals(this.gateway, nftMedia.gateway) &&
        Objects.equals(this.thumbnail, nftMedia.thumbnail) &&
        Objects.equals(this.format, nftMedia.format) &&
        Objects.equals(this.bytes, nftMedia.bytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(raw, gateway, thumbnail, format, bytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NftMedia {\n");
    sb.append("    raw: ").append(toIndentedString(raw)).append("\n");
    sb.append("    gateway: ").append(toIndentedString(gateway)).append("\n");
    sb.append("    thumbnail: ").append(toIndentedString(thumbnail)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    bytes: ").append(toIndentedString(bytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

